name: Push SOPS Secrets to GitHub

on:
  push:
    paths:
    - 'secrets/reposecrets.sops.yml'
  workflow_dispatch:

jobs:
  update-secrets:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install SOPS
      run: |
        # Download and install SOPS
        wget https://github.com/getsops/sops/releases/download/v3.8.1/sops-v3.8.1.linux.amd64
        chmod +x sops-v3.8.1.linux.amd64
        sudo mv sops-v3.8.1.linux.amd64 /usr/local/bin/sops

    - name: Install age
      run: |
        # Download and install age for decryption
        wget https://github.com/FiloSottile/age/releases/download/v1.1.1/age-v1.1.1-linux-amd64.tar.gz
        tar xzf age-v1.1.1-linux-amd64.tar.gz
        sudo mv age/age /usr/local/bin/
        sudo mv age/age-keygen /usr/local/bin/

    - name: Set up age key
      run: |
        mkdir -p ~/.config/sops/age
        echo "${{ secrets.SOPS_AGE_KEY }}" > ~/.config/sops/age/keys.txt
        chmod 600 ~/.config/sops/age/keys.txt

    - name: Decrypt and update secrets
      env:
        GH_TOKEN: ${{ secrets.FINE_GRAINED_TOKEN }}
      run: |
        # Decrypt the SOPS file to a temporary file
        sops -d secrets/reposecrets.sops.yml > decrypted_secrets.yml
        
        # Install yq for YAML parsing
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
        
        # Get repository info
        REPO_OWNER="${{ github.repository_owner }}"
        REPO_NAME="${{ github.event.repository.name }}"
        
        # Function to update a secret
        update_secret() {
          local secret_name="$1"
          local secret_value="$2"
          
          echo "Updating secret: $secret_name"
          
          # Create or update the secret using GitHub CLI
          echo "$secret_value" | gh secret set "$secret_name" --repo "$REPO_OWNER/$REPO_NAME"
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Successfully updated secret: $secret_name"
          else
            echo "‚ùå Failed to update secret: $secret_name"
            exit 1
          fi
        }
        
        # Extract all secrets from the decrypted YAML (excluding SOPS metadata)
        # Get all top-level keys that aren't 'sops'
        SECRET_KEYS=$(yq eval 'keys | .[] | select(. != "sops")' decrypted_secrets.yml)
        
        # Loop through each secret and update it
        while IFS= read -r secret_name; do
          if [ -n "$secret_name" ]; then
            secret_value=$(yq eval ".$secret_name" decrypted_secrets.yml)
            update_secret "$secret_name" "$secret_value"
          fi
        done <<< "$SECRET_KEYS"
        
        # Clean up temporary file
        rm decrypted_secrets.yml
        
        echo "üéâ All secrets have been updated successfully!"

    - name: Trigger dependent workflows
      if: success()
      env:
        GH_TOKEN: ${{ secrets.FINE_GRAINED_TOKEN }}
      run: |
        # Trigger deploy-cloudflare workflow
        gh workflow run deploy-cloudflare.yml
        
        # Trigger deploy-stacks workflow
        gh workflow run deploy-stacks.yml

    - name: Cleanup
      if: always()
      run: |
        # Remove any temporary files and keys
        rm -f decrypted_secrets.yml
        rm -rf ~/.config/sops/